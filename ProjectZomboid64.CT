<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Version: 41.71"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"scratched or bleeding not update 2? garbage collected"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ProjectZomboid64.exe
  Version: 
  Date   : 2022-07-17
  Author : Edgar Han

  This script does blah blah blah
}

[ENABLE]


aobscan(HEALTH_DEC,C5 FA 11 41 18 * * * * * * * * 0F 87 6E) // should be unique
alloc(newmem,$1000,HEALTH_DEC)

label(code)
label(return)

newmem:

code:
  //vmovss [rcx+18],xmm0
  nop
  nop
  nop
  nop
  nop
  jmp return

HEALTH_DEC:
  jmp newmem
return:
registersymbol(HEALTH_DEC)

[DISABLE]

HEALTH_DEC:
  db C5 FA 11 41 18

unregistersymbol(HEALTH_DEC)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1B4CC4E526A

1B4CC4E524A: EB 16              - jmp 1B4CC4E5262
1B4CC4E524C: C5 F8 28 C2        - vmovaps xmm0,xmm2
1B4CC4E5250: EB 10              - jmp 1B4CC4E5262
1B4CC4E5252: C5 F8 28 C3        - vmovaps xmm0,xmm3
1B4CC4E5256: EB 0A              - jmp 1B4CC4E5262
1B4CC4E5258: C5 F8 28 C3        - vmovaps xmm0,xmm3
1B4CC4E525C: EB 04              - jmp 1B4CC4E5262
1B4CC4E525E: C5 F8 28 C2        - vmovaps xmm0,xmm2
1B4CC4E5262: C5 B2 5E C0        - vdivss xmm0,xmm9,xmm0
1B4CC4E5266: C5 AA 5C C0        - vsubss xmm0,xmm10,xmm0
// ---------- INJECTING HERE ----------
1B4CC4E526A: C5 FA 11 41 18     - vmovss [rcx+18],xmm0
// ---------- DONE INJECTING  ----------
1B4CC4E526F: C5 F0 57 C9        - vxorps xmm1,xmm1,xmm1
1B4CC4E5273: C5 F8 2E C8        - vucomiss xmm1,xmm0
1B4CC4E5277: 0F 87 6E 01 00 00  - ja 1B4CC4E53EB
1B4CC4E527D: 45 8B D3           - mov r10d,r11d
1B4CC4E5280: 41 83 C2 02        - add r10d,02
1B4CC4E5284: 41 83 FA 10        - cmp r10d,10
1B4CC4E5288: 7D 3B              - jnl 1B4CC4E52C5
1B4CC4E528A: 45 8B DA           - mov r11d,r10d
1B4CC4E528D: 4D 63 D3           - movsxd  r10,r11d
1B4CC4E5290: 46 8B 4C 92 10     - mov r9d,[rdx+r10*4+10]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Health regen rate"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ProjectZomboid64.exe
  Version: 
  Date   : 2022-07-17
  Author : Edgar Han

  This script does blah blah blah
}

[ENABLE]


aobscan(HEALTH_REGEN,C4 C1 7A 11 60 18 * * * * AB) // should be unique
alloc(newmem,$1000,HEALTH_REGEN)
registersymbol(HEALTH_PTR)

label(code)
label(return)

newmem:
  push rcx
  lea rcx,[r12]
  mov [HEALTH_PTR],rcx
  pop rcx

code:
  vmovss [r8+18],xmm4
  jmp return

HEALTH_PTR:
  dq 0

HEALTH_REGEN:
  jmp newmem
  nop
return:
registersymbol(HEALTH_REGEN)

[DISABLE]

HEALTH_REGEN:
  db C4 C1 7A 11 60 18

unregistersymbol(*)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1B4CC511647

1B4CC511616: 47 8B 5C D4 08           - mov r11d,[r12+r10*8+08]
1B4CC51161B: 4F 8D 04 D4              - lea r8,[r12+r10*8]
1B4CC51161F: 41 81 FB B8 30 E8 00     - cmp r11d,00E830B8
1B4CC511626: 0F 85 98 02 00 00        - jne 1B4CC5118C4
1B4CC51162C: C4 C1 7A 10 60 18        - vmovss xmm4,[r8+18]
1B4CC511632: 44 8B D1                 - mov r10d,ecx
1B4CC511635: 41 83 C2 02              - add r10d,02
1B4CC511639: C5 F8 2E D4              - vucomiss xmm2,xmm4
1B4CC51163D: 0F 86 75 FF FF FF        - jbe 1B4CC5115B8
1B4CC511643: C5 DA 58 E1              - vaddss xmm4,xmm4,xmm1
// ---------- INJECTING HERE ----------
1B4CC511647: C4 C1 7A 11 60 18        - vmovss [r8+18],xmm4
// ---------- DONE INJECTING  ----------
1B4CC51164D: C5 F8 2E 25 AB FA FF FF  - vucomiss xmm4,[1B4CC511100]
1B4CC511655: 0F 87 55 FF FF FF        - ja 1B4CC5115B0
1B4CC51165B: E9 58 FF FF FF           - jmp 1B4CC5115B8
1B4CC511660: 41 83 FA 11              - cmp r10d,11
1B4CC511664: 7D 50                    - jnl 1B4CC5116B6
1B4CC511666: 83 C1 02                 - add ecx,02
1B4CC511669: 66 66 90                 - nop 3
1B4CC51166C: 45 8B 54 8D 10           - mov r10d,[r13+rcx*4+10]
1B4CC511671: 47 8B 4C D4 08           - mov r9d,[r12+r10*8+08]
1B4CC511676: 4F 8D 04 D4              - lea r8,[r12+r10*8]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Health Pointer"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>HEALTH_PTR</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>9</ID>
              <Description>"Health 1"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>HEALTH_PTR + 8 + 18</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"scratched or bleeding not update 3? garbage collected"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ProjectZomboid64.exe
  Version: 
  Date   : 2022-07-17
  Author : Edgar Han

  This script does blah blah blah
}

[ENABLE]

aobscan(HEALTH_DEC_INFECTION,C5 FA 11 43 18 * * * * 0F 87 67) // should be unique
alloc(newmem,$1000,HEALTH_DEC_INFECTION)

label(code)
label(return)

newmem:

code:
  //vmovss [rbx+18],xmm0
  nop
  nop
  nop
  nop
  nop
  jmp return

HEALTH_DEC_INFECTION:
  jmp newmem
return:
registersymbol(HEALTH_DEC_INFECTION)

[DISABLE]

HEALTH_DEC_INFECTION:
  db C5 FA 11 43 18

unregistersymbol(HEALTH_DEC_INFECTION)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1B4CC572EAC

1B4CC572E8B: EB 16              - jmp 1B4CC572EA3
1B4CC572E8D: C5 F8 28 CB        - vmovaps xmm1,xmm3
1B4CC572E91: EB 10              - jmp 1B4CC572EA3
1B4CC572E93: C5 F8 28 CC        - vmovaps xmm1,xmm4
1B4CC572E97: EB 0A              - jmp 1B4CC572EA3
1B4CC572E99: C5 F8 28 CC        - vmovaps xmm1,xmm4
1B4CC572E9D: EB 04              - jmp 1B4CC572EA3
1B4CC572E9F: C5 F8 28 CB        - vmovaps xmm1,xmm3
1B4CC572EA3: C5 32 5E D9        - vdivss xmm11,xmm9,xmm1
1B4CC572EA7: C4 C1 7A 5C C3     - vsubss xmm0,xmm0,xmm11
// ---------- INJECTING HERE ----------
1B4CC572EAC: C5 FA 11 43 18     - vmovss [rbx+18],xmm0
// ---------- DONE INJECTING  ----------
1B4CC572EB1: C5 F8 2E D0        - vucomiss xmm2,xmm0
1B4CC572EB5: 0F 87 67 01 00 00  - ja 1B4CC573022
1B4CC572EBB: 45 8B C2           - mov r8d,r10d
1B4CC572EBE: 41 83 C0 02        - add r8d,02
1B4CC572EC2: 41 83 F8 10        - cmp r8d,10
1B4CC572EC6: 7D 3A              - jnl 1B4CC572F02
1B4CC572EC8: 45 8B D0           - mov r10d,r8d
1B4CC572ECB: 4D 63 DA           - movsxd  r11,r10d
1B4CC572ECE: 46 8B 44 98 10     - mov r8d,[rax+r11*4+10]
1B4CC572ED3: 43 8B 4C C4 08     - mov ecx,[r12+r8*8+08]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Health dec 4"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ProjectZomboid64.exe
  Version: 
  Date   : 2022-07-17
  Author : Edgar Han

  This script does blah blah blah
}

[ENABLE]

aobscan(HEALTH_DEC_2,C4 C1 7A 11 42 18 E9 F6) // should be unique
alloc(newmem,$1000,HEALTH_DEC_2)

label(code)
label(return)

newmem:

code:
  //vmovss [r10+18],xmm0
  nop
  nop
  nop
  nop
  nop
  nop
  jmp return

HEALTH_DEC_2:
  jmp newmem
  nop
return:
registersymbol(HEALTH_DEC_2)

[DISABLE]

HEALTH_DEC_2:
  db C4 C1 7A 11 42 18

unregistersymbol(HEALTH_DEC_2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1B4CC991CDC

1B4CC991CAC: 43 0F B6 4C CC 12        - movzx ecx,byte ptr [r12+r9*8+12]
1B4CC991CB2: 85 C9                    - test ecx,ecx
1B4CC991CB4: 0F 84 07 06 00 00        - je 1B4CC9922C1
1B4CC991CBA: 43 0F B6 6C CC 11        - movzx ebp,byte ptr [r12+r9*8+11]
1B4CC991CC0: 85 ED                    - test ebp,ebp
1B4CC991CC2: 0F 85 6C 13 00 00        - jne 1B4CC993034
1B4CC991CC8: C5 FA 59 05 54 F0 FF FF  - vmulss xmm0,xmm0,[1B4CC990D24]
1B4CC991CD0: C5 FA 59 C9              - vmulss xmm1,xmm0,xmm1
1B4CC991CD4: C5 CA 5C C1              - vsubss xmm0,xmm6,xmm1
1B4CC991CD8: 4C 8B 14 24              - mov r10,[rsp]
// ---------- INJECTING HERE ----------
1B4CC991CDC: C4 C1 7A 11 42 18        - vmovss [r10+18],xmm0
// ---------- DONE INJECTING  ----------
1B4CC991CE2: E9 F6 F5 FF FF           - jmp 1B4CC9912DD
1B4CC991CE7: 85 FF                    - test edi,edi
1B4CC991CE9: 0F 85 B5 15 00 00        - jne 1B4CC9932A4
1B4CC991CEF: C4 01 7A 10 64 C4 3C     - vmovss xmm12,[r12+r8*8+3C]
1B4CC991CF6: 85 C9                    - test ecx,ecx
1B4CC991CF8: 0F 85 FE 13 00 00        - jne 1B4CC9930FC
1B4CC991CFE: 85 DB                    - test ebx,ebx
1B4CC991D00: 0F 85 1A 14 00 00        - jne 1B4CC993120
1B4CC991D06: 85 C0                    - test eax,eax
1B4CC991D08: 0F 84 F9 00 00 00        - je 1B4CC991E07
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Health Dec 5"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ProjectZomboid64.exe
  Version: 
  Date   : 2022-07-17
  Author : Edgar Han

  damage from zombie attack?
}

[ENABLE]

aobscan(HEALTH_DEC_5,C5 FA 11 04 19 * 0F B6) // should be unique
alloc(newmem,$1000,HEALTH_DEC_5)

label(code)
label(return)

newmem:

code:
  //vmovss [rcx+rbx],xmm0
  nop
  nop
  nop
  nop
  nop
  jmp return

HEALTH_DEC_5:
  jmp newmem
return:
registersymbol(HEALTH_DEC_5)

[DISABLE]

HEALTH_DEC_5:
  db C5 FA 11 04 19

unregistersymbol(HEALTH_DEC_5)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1B4C3C5DA20

1B4C3C5D9F9: 48 8B 5C D9 30                 - mov rbx,[rcx+rbx*8+30]
1B4C3C5D9FE: C1 EA 15                       - shr edx,15
1B4C3C5DA01: 83 E2 01                       - and edx,01
1B4C3C5DA04: 59                             - pop rcx
1B4C3C5DA05: 48 3B 01                       - cmp rax,[rcx]
1B4C3C5DA08: 85 D2                          - test edx,edx
1B4C3C5DA0A: 0F 84 10 00 00 00              - je 1B4C3C5DA20
1B4C3C5DA10: C5 FA 11 04 19                 - vmovss [rcx+rbx],xmm0
1B4C3C5DA15: F0 83 44 24 C0 00              - lock add dword ptr [rsp-40],00
1B4C3C5DA1B: E9 05 00 00 00                 - jmp 1B4C3C5DA25
// ---------- INJECTING HERE ----------
1B4C3C5DA20: C5 FA 11 04 19                 - vmovss [rcx+rbx],xmm0
// ---------- DONE INJECTING  ----------
1B4C3C5DA25: 41 0F B6 5D 03                 - movzx ebx,byte ptr [r13+03]
1B4C3C5DA2A: 49 83 C5 03                    - add r13,03
1B4C3C5DA2E: 49 BA 20 1C AB DF FF 7F 00 00  - mov r10,jvm.dll+B91C20
1B4C3C5DA38: 41 FF 24 DA                    - jmp qword ptr [r10+rbx*8]
1B4C3C5DA3C: 0F 1F 40 00                    - nop dword ptr [rax+00]
1B4C3C5DA40: 80 00 00                       - add byte ptr [rax],00
1B4C3C5DA43: 00 00                          - add [rax],al
1B4C3C5DA45: 00 00                          - add [rax],al
1B4C3C5DA47: 00 30                          - add [rax],dh
1B4C3C5DA49: 85 83 DF FF 7F 00              - test [rbx+007FFFDF],eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"scratched or bleeding not update,garbage collected"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ProjectZomboid64.exe
  Version: 
  Date   : 2022-07-17
  Author : Edgar Han

  This script does blah blah blah
}

[ENABLE]

aobscan(HEALTH_DEC_0,C4 C1 7A 11 41 18 E9) // should be unique
alloc(newmem,$1000,HEALTH_DEC_0)

label(code)
label(return)

newmem:

code:
  //vmovss [r9+18],xmm0
  nop
  nop
  nop
  nop
  nop
  nop
  jmp return

HEALTH_DEC_0:
  jmp newmem
  nop
return:
registersymbol(HEALTH_DEC_0)

[DISABLE]

HEALTH_DEC_0:
  db C4 C1 7A 11 41 18

unregistersymbol(HEALTH_DEC_0)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1B4CC4E3BAE

1B4CC4E3B7E: 43 0F B6 54 EC 12        - movzx edx,byte ptr [r12+r13*8+12]
1B4CC4E3B84: 85 D2                    - test edx,edx
1B4CC4E3B86: 0F 84 C5 03 00 00        - je 1B4CC4E3F51
1B4CC4E3B8C: 43 0F B6 6C EC 11        - movzx ebp,byte ptr [r12+r13*8+11]
1B4CC4E3B92: 85 ED                    - test ebp,ebp
1B4CC4E3B94: 0F 85 6E 13 00 00        - jne 1B4CC4E4F08
1B4CC4E3B9A: C5 EA 59 05 82 EE FF FF  - vmulss xmm0,xmm2,[1B4CC4E2A24]
1B4CC4E3BA2: C5 FA 59 C9              - vmulss xmm1,xmm0,xmm1
1B4CC4E3BA6: C5 D2 5C C1              - vsubss xmm0,xmm5,xmm1
1B4CC4E3BAA: 4C 8B 0C 24              - mov r9,[rsp]
// ---------- INJECTING HERE ----------
1B4CC4E3BAE: C4 C1 7A 11 41 18        - vmovss [r9+18],xmm0
// ---------- DONE INJECTING  ----------
1B4CC4E3BB4: E9 24 F4 FF FF           - jmp 1B4CC4E2FDD
1B4CC4E3BB9: 45 85 D2                 - test r10d,r10d
1B4CC4E3BBC: 0F 85 66 10 00 00        - jne 1B4CC4E4C28
1B4CC4E3BC2: 45 8B 91 A8 00 00 00     - mov r10d,[r9+000000A8]
1B4CC4E3BC9: 47 8B 94 D4 D4 03 00 00  - mov r10d,[r12+r10*8+000003D4]
1B4CC4E3BD1: C4 C1 79 6E C2           - vmovd xmm0,r10d
1B4CC4E3BD6: C4 81 7A 10 5C F4 3C     - vmovss xmm3,[r12+r14*8+3C]
1B4CC4E3BDD: C4 C1 42 59 71 10        - vmulss xmm6,xmm7,[r9+10]
1B4CC4E3BE3: 85 F6                    - test esi,esi
1B4CC4E3BE5: 0F 85 79 10 00 00        - jne 1B4CC4E4C64
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"Ignore Damages?"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ProjectZomboid64.exe
  Version: 
  Date   : 2022-07-17
  Author : Edgar Han

  The jump ops change seems to skip over health damage from various negative
  buffs
}

[ENABLE]


aobscanregion(HEALTH_DEC_0,0,ProjectZomboid64.exe,7E 68 33 ED 66 0F 1F 44 00 00 89) // should be unique

HEALTH_DEC_0:
  db EB 68
return:
registersymbol(HEALTH_DEC_0)

[DISABLE]

HEALTH_DEC_0:
  db 7E 68 33 ED 66 0F 1F 44 00 00

unregistersymbol(HEALTH_DEC_0)

{
// ORIGINAL CODE - INJECTION POINT: 1402F0BF1C6

1402F0BF19E: 72 10                          - jb 1402F0BF1B0
1402F0BF1A0: 48 8B 54 24 28                 - mov rdx,[rsp+28]
1402F0BF1A5: 48 8B EA                       - mov rbp,rdx
1402F0BF1A8: C5 F8 77                       - vzeroupper 
1402F0BF1AB: E8 D0 DB 50 F7                 - call 140265CCD80
1402F0BF1B0: 48 BA 78 41 C4 45 07 00 00 00  - mov rdx,0000000745C44178
1402F0BF1BA: 66 90                          - nop 2
1402F0BF1BC: C5 F8 77                       - vzeroupper 
1402F0BF1BF: E8 1C A1 A0 FF                 - call 1402EAC92E0
1402F0BF1C4: 85 C0                          - test eax,eax
// ---------- INJECTING HERE ----------
1402F0BF1C6: 7E 68                          - jle 1402F0BF230
// ---------- DONE INJECTING  ----------
1402F0BF1C8: 33 ED                          - xor ebp,ebp
1402F0BF1CA: 66 0F 1F 44 00 00              - nop word ptr [rax+rax+00]
1402F0BF1D0: 89 6C 24 24                    - mov [rsp+24],ebp
1402F0BF1D4: 48 8B 54 24 28                 - mov rdx,[rsp+28]
1402F0BF1D9: 66 66 90                       - nop 3
1402F0BF1DC: C5 F8 77                       - vzeroupper 
1402F0BF1DF: E8 5C 5C 70 FF                 - call 1402E7C4E40
1402F0BF1E4: 48 85 C0                       - test rax,rax
1402F0BF1E7: 0F 84 77 19 00 00              - je 1402F0C0B64
1402F0BF1ED: 48 8B D0                       - mov rdx,rax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Ignore isDebuggerPresent"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ProjectZomboid64.exe
  Version: 
  Date   : 2022-07-20
  Author : Edgar Han

  ignores flags for isDebuggerPresent in jvm
}

define(address,"jvm.dll"+673601)
define(bytes,74 35 C7 44 24 20 00 10 00 00)

[ENABLE]

assert(address,bytes)

address:
  jmp jvm.dll+673638

[DISABLE]

address:
  db bytes
  // je jvm.dll+673638
  // mov [rsp+20],00001000

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: jvm.dll+673601

jvm.dll+6735EB: CC                       - int 3 
jvm.dll+6735EC: CC                       - int 3 
jvm.dll+6735ED: CC                       - int 3 
jvm.dll+6735EE: CC                       - int 3 
jvm.dll+6735EF: CC                       - int 3 
jvm.dll+6735F0: 40 53                    - push rbx
jvm.dll+6735F2: 48 83 EC 40              - sub rsp,40
jvm.dll+6735F6: 48 8B D9                 - mov rbx,rcx
jvm.dll+6735F9: FF 15 81 8B 21 00        - call qword ptr [jvm.dll+88C180]
jvm.dll+6735FF: 85 C0                    - test eax,eax
// ---------- INJECTING HERE ----------
jvm.dll+673601: 74 35                    - je jvm.dll+673638
// ---------- DONE INJECTING  ----------
jvm.dll+673603: C7 44 24 20 00 10 00 00  - mov [rsp+20],00001000
jvm.dll+67360B: 48 89 5C 24 28           - mov [rsp+28],rbx
jvm.dll+673610: C7 44 24 30 FF FF FF FF  - mov [rsp+30],FFFFFFFF
jvm.dll+673618: C7 44 24 34 00 00 00 00  - mov [rsp+34],00000000
jvm.dll+673620: 4C 8D 4C 24 20           - lea r9,[rsp+20]
jvm.dll+673625: 33 D2                    - xor edx,edx
jvm.dll+673627: 44 8D 42 06              - lea r8d,[rdx+06]
jvm.dll+67362B: B9 88 13 6D 40           - mov ecx,406D1388
jvm.dll+673630: FF 15 62 8B 21 00        - call qword ptr [jvm.dll+88C198]
jvm.dll+673636: EB 00                    - jmp jvm.dll+673638
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"Enable Base Pointer"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ProjectZomboid64.exe
  Version: 
  Date   : 2022-07-20
  Author : Edgar Han

  This script does blah blah blah
}

define(address,"jvm.dll"+37428D)
define(bytes,E8 9E EF FF FF)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"jvm.dll"+37428D)

label(code)
label(return)

newmem:
  push rax
  mov rax,[rsp+2C0]
  mov [BASE_ADDRESS],rax
  pop rax

code:
  call jvm.dll+373230
  jmp return

BASE_ADDRESS:
  dq 0

address:
  jmp newmem
return:
registersymbol(BASE_ADDRESS)
[DISABLE]

address:
  db bytes
  // call jvm.dll+373230

dealloc(newmem)
unregistersymbol(BASE_ADDRESS)
{
// ORIGINAL CODE - INJECTION POINT: jvm.dll+37428D

jvm.dll+374261: 4D 8B F8                    - mov r15,r8
jvm.dll+374264: 4C 8B F2                    - mov r14,rdx
jvm.dll+374267: 4C 8B E9                    - mov r13,rcx
jvm.dll+37426A: 48 85 C9                    - test rcx,rcx
jvm.dll+37426D: 0F 84 77 01 00 00           - je jvm.dll+3743EA
jvm.dll+374273: 8B 74 24 60                 - mov esi,[rsp+60]
jvm.dll+374277: 66 0F 1F 84 00 00 00 00 00  - nop word ptr [rax+rax+00000000]
jvm.dll+374280: 49 8B AD 90 01 00 00        - mov rbp,[r13+00000190]
jvm.dll+374287: 49 8B D6                    - mov rdx,r14
jvm.dll+37428A: 48 8B CD                    - mov rcx,rbp
// ---------- INJECTING HERE ----------
jvm.dll+37428D: E8 9E EF FF FF              - call jvm.dll+373230
// ---------- DONE INJECTING  ----------
jvm.dll+374292: 4C 63 D8                    - movsxd  r11,eax
jvm.dll+374295: 41 83 FB FF                 - cmp r11d,-01
jvm.dll+374299: 0F 84 39 01 00 00           - je jvm.dll+3743D8
jvm.dll+37429F: 4E 8B 44 DD 08              - mov r8,[rbp+r11*8+08]
jvm.dll+3742A4: 49 8B 40 08                 - mov rax,[r8+08]
jvm.dll+3742A8: 0F B7 50 24                 - movzx edx,word ptr [rax+24]
jvm.dll+3742AC: 48 8B 48 08                 - mov rcx,[rax+08]
jvm.dll+3742B0: 4C 39 7C D1 48              - cmp [rcx+rdx*8+48],r15
jvm.dll+3742B5: 75 29                       - jne jvm.dll+3742E0
jvm.dll+3742B7: 83 FF 01                    - cmp edi,01
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"Enable 2"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ProjectZomboid64.exe
  Version: 
  Date   : 2022-07-20
  Author : Edgar Han

  This script does blah blah blah
}

define(address,"jvm.dll"+6DA587)
define(bytes,E8 34 A2 A4 FF)

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
assert(address,bytes)
alloc(newmem,$1000,"jvm.dll"+6DA587)

label(code)
label(return)

newmem:
  push rcx
  mov rcx,[rsp-C0]
  mov [BASE_ADDRESS],rcx
  pop rcx

code:
  call jvm.dll+1247C0
  jmp return

BASE_ADDRESS:
  dq 0

address:
  jmp newmem
return:
registersymbol(BASE_ADDRESS)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
address:
  db bytes
  // call jvm.dll+1247C0

dealloc(newmem)
unregistersymbol(BASE_ADDRESS)

{
// ORIGINAL CODE - INJECTION POINT: jvm.dll+6DA587

jvm.dll+6DA55D: 48 8B CF              - mov rcx,rdi
jvm.dll+6DA560: E8 6B 2A 11 00        - call jvm.dll+7ECFD0
jvm.dll+6DA565: 4C 8D 45 E0           - lea r8,[rbp-20]
jvm.dll+6DA569: 48 8D 55 A8           - lea rdx,[rbp-58]
jvm.dll+6DA56D: 48 8D 4C 24 78        - lea rcx,[rsp+78]
jvm.dll+6DA572: E8 49 F4 BE FF        - call jvm.AsyncGetCallTrace+30B0
jvm.dll+6DA577: 48 83 7C 24 30 00     - cmp qword ptr [rsp+30],00
jvm.dll+6DA57D: 75 48                 - jne jvm.dll+6DA5C7
jvm.dll+6DA57F: 48 8B D7              - mov rdx,rdi
jvm.dll+6DA582: 48 8D 4C 24 60        - lea rcx,[rsp+60]
// ---------- INJECTING HERE ----------
jvm.dll+6DA587: E8 34 A2 A4 FF        - call jvm.dll+1247C0
// ---------- DONE INJECTING  ----------
jvm.dll+6DA58C: 48 83 7F 08 00        - cmp qword ptr [rdi+08],00
jvm.dll+6DA591: 0F 85 C8 00 00 00     - jne jvm.dll+6DA65F
jvm.dll+6DA597: 48 85 C0              - test rax,rax
jvm.dll+6DA59A: 75 2B                 - jne jvm.dll+6DA5C7
jvm.dll+6DA59C: 4C 8B 0D 65 02 4B 00  - mov r9,[jvm.dll+B8A808]
jvm.dll+6DA5A3: 41 B8 7C 04 00 00     - mov r8d,0000047C
jvm.dll+6DA5A9: 33 DB                 - xor ebx,ebx
jvm.dll+6DA5AB: 48 8D 15 CE 9B 2D 00  - lea rdx,[jvm.ServiceThread::`vftable'+200]
jvm.dll+6DA5B2: 48 8B CF              - mov rcx,rdi
jvm.dll+6DA5B5: 48 89 5C 24 20        - mov [rsp+20],rbx
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>19</ID>
          <Description>"Base Address"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>8 Bytes</VariableType>
          <Address>BASE_ADDRESS</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of vsubss xmm0,xmm3,xmm1</Description>
      <AddressString>19A8DED932F</AddressString>
      <Before>
        <Byte>FF</Byte>
        <Byte>C5</Byte>
        <Byte>EA</Byte>
        <Byte>59</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>C5</Byte>
        <Byte>E2</Byte>
        <Byte>5C</Byte>
        <Byte>C1</Byte>
      </Actual>
      <After>
        <Byte>4C</Byte>
        <Byte>8B</Byte>
        <Byte>1C</Byte>
        <Byte>24</Byte>
        <Byte>C4</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call 1402F33FBC0</Description>
      <AddressString>1402F0BF213</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>D0</Byte>
        <Byte>C5</Byte>
        <Byte>F8</Byte>
        <Byte>77</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>A8</Byte>
        <Byte>09</Byte>
        <Byte>28</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>FF</Byte>
        <Byte>C5</Byte>
        <Byte>48</Byte>
        <Byte>BA</Byte>
        <Byte>78</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>bla</Name>
      <Address>22983000000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>cmd</Name>
      <Address>22983000400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>arg0</Name>
      <Address>22983000410</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>arg1</Name>
      <Address>22983000510</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>arg2</Name>
      <Address>22983000610</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>result</Name>
      <Address>22983000710</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pipename</Name>
      <Address>22983000720</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Find Health:
- break glass and jump through to get scratch
- search float between 100 - 70
- keep searching for a decreased value

probably called at loading world
jvm.dll+40D49C - E8 9F9DF7FF           - call jvm.dll+387240
</Comments>
  <LuaScript>getApplication().Title="framerates"
getMainForm().Caption="framerates"

</LuaScript>
</CheatTable>
