<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Remnant version 275957P"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Attach"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
getApplication().Title="framerates"
getMainForm().Caption="framerates"
getAutoAttachList().add("Remnant-Win64-Shipping.exe")
{$asm}
[DISABLE]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"item usage script (equipment quantity does not change)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Remnant-Win64-Shipping.exe
  Version: 
  Date   : 2023-07-28
  Author : bboyh

  Items used does not decrease
}


[ENABLE]

assert(Remnant-Win64-Shipping.AEquipment::SetQuantity+10,89 50 2C 48 8B 89 68 05 00 00)

Remnant-Win64-Shipping.AEquipment::SetQuantity+10:
  db 90 90 90
return:

[DISABLE]

Remnant-Win64-Shipping.AEquipment::SetQuantity+10:
  db 89 50 2C 48 8B 89 68 05 00 00
  // mov [rax+2C],edx
  // mov rcx,[rcx+00000568]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: Remnant-Win64-Shipping.AEquipment::SetQuantity+10

Remnant-Win64-Shipping.exe+7A02FA: CC                    - int 3 
Remnant-Win64-Shipping.exe+7A02FB: CC                    - int 3 
Remnant-Win64-Shipping.exe+7A02FC: CC                    - int 3 
Remnant-Win64-Shipping.exe+7A02FD: CC                    - int 3 
Remnant-Win64-Shipping.exe+7A02FE: CC                    - int 3 
Remnant-Win64-Shipping.exe+7A02FF: CC                    - int 3 
Remnant-Win64-Shipping.AEquipment::SetQuantity: 48 83 EC 28           - sub rsp,28
Remnant-Win64-Shipping.AEquipment::SetQuantity+4: 48 8B 81 50 03 00 00  - mov rax,[rcx+00000350]
Remnant-Win64-Shipping.AEquipment::SetQuantity+B: 48 85 C0              - test rax,rax
Remnant-Win64-Shipping.AEquipment::SetQuantity+E: 74 03                 - je Remnant-Win64-Shipping.AEquipment::SetQuantity+13
// ---------- INJECTING HERE ----------
Remnant-Win64-Shipping.AEquipment::SetQuantity+10: 89 50 2C              - mov [rax+2C],edx
// ---------- DONE INJECTING  ----------
Remnant-Win64-Shipping.AEquipment::SetQuantity+13: 48 8B 89 68 05 00 00  - mov rcx,[rcx+00000568]
Remnant-Win64-Shipping.AEquipment::SetQuantity+1A: 48 85 C9              - test rcx,rcx
Remnant-Win64-Shipping.AEquipment::SetQuantity+1D: 74 64                 - je Remnant-Win64-Shipping.AEquipment::SetQuantity+83
Remnant-Win64-Shipping.AEquipment::SetQuantity+1F: 48 89 5C 24 20        - mov [rsp+20],rbx
Remnant-Win64-Shipping.AEquipment::SetQuantity+24: E8 B7 45 F5 FF        - call Remnant-Win64-Shipping.ACharacterGunfire::GetCharacterInventory
Remnant-Win64-Shipping.AEquipment::SetQuantity+29: 48 8B D8              - mov rbx,rax
Remnant-Win64-Shipping.AEquipment::SetQuantity+2C: 48 85 C0              - test rax,rax
Remnant-Win64-Shipping.AEquipment::SetQuantity+2F: 74 4D                 - je Remnant-Win64-Shipping.AEquipment::SetQuantity+7E
Remnant-Win64-Shipping.AEquipment::SetQuantity+31: 48 8B 88 E8 00 00 00  - mov rcx,[rax+000000E8]
Remnant-Win64-Shipping.AEquipment::SetQuantity+38: 48 85 C9              - test rcx,rcx
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Items do not decrease (iron, money, ..., inf buying, inventory items doe not decrease)"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Remnant-Win64-Shipping.exe
  Version: 
  Date   : 2023-07-28
  Author : bboyh

  This script does blah blah blah
}

[ENABLE]

assert(Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1EF,41 2B C6 89 41 2C)

Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1EF:
  //add eax,r14d
  db 90 90 90 90 90 90

[DISABLE]

Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1EF:
  db 41 2B C6 89 41 2C
  // sub eax,r14d
  // mov [rcx+2C],eax

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1EF

Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1C9: 41 89 44 24 08     - mov [r12+08],eax
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1CE: E8 ED 71 CC FF     - call "Remnant-Win64"-Shipping.TArray&lt;FBatchedPoint,FDefaultAllocator&gt;::ResizeShrink
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1D3: 45 85 F6           - test r14d,r14d
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1D6: 7E 2D              - jle Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+205
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1D8: FF 4C 24 20        - dec [rsp+20]
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1DC: FF CD              - dec ebp
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1DE: 49 83 ED 28        - sub r13,28
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1E2: 83 7C 24 24 00     - cmp dword ptr [rsp+24],00
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1E7: 0F 8F C3 FE FF FF  - jg Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+B0
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1ED: EB 16              - jmp Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+205
// ---------- INJECTING HERE ----------
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1EF: 41 2B C6           - sub eax,r14d
// ---------- DONE INJECTING  ----------
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1F2: 89 41 2C           - mov [rcx+2C],eax
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1F5: 48 8B 4F 18        - mov rcx,[rdi+18]
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1F9: 48 83 C1 30        - add rcx,30
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+1FD: E8 7E 38 B3 FF     - call Remnant-Win64-Shipping.TMulticastScriptDelegate&lt;FWeakObjectPtr&gt;::ProcessMulticastDelegate&lt;UObject&gt;
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+202: 45 33 F6           - xor r14d,r14d
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+205: 4C 8B 6C 24 30     - mov r13,[rsp+30]
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+20A: 4C 8B 64 24 38     - mov r12,[rsp+38]
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+20F: 48 8B 7C 24 40     - mov rdi,[rsp+40]
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+214: 48 8B 74 24 48     - mov rsi,[rsp+48]
Remnant-Win64-Shipping.UInventoryComponent::RemoveItemInternal+219: 44 3B 74 24 28     - cmp r14d,[rsp+28]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"Unlimited Ammo"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Remnant-Win64-Shipping.exe
  Version: 
  Date   : 2023-07-30
  Author : bboyh

  This script does blah blah blah
}

[ENABLE]

assert(Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo,48 89 5C 24 08)

Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo:
  ret

[DISABLE]

Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo:
  db 48 89 5C 24 08
  // mov [rsp+08],rbx


{
// ORIGINAL CODE - INJECTION POINT: Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo

Remnant-Win64-Shipping.exe+778DF6: CC                    - int 3 
Remnant-Win64-Shipping.exe+778DF7: CC                    - int 3 
Remnant-Win64-Shipping.exe+778DF8: CC                    - int 3 
Remnant-Win64-Shipping.exe+778DF9: CC                    - int 3 
Remnant-Win64-Shipping.exe+778DFA: CC                    - int 3 
Remnant-Win64-Shipping.exe+778DFB: CC                    - int 3 
Remnant-Win64-Shipping.exe+778DFC: CC                    - int 3 
Remnant-Win64-Shipping.exe+778DFD: CC                    - int 3 
Remnant-Win64-Shipping.exe+778DFE: CC                    - int 3 
Remnant-Win64-Shipping.exe+778DFF: CC                    - int 3 
// ---------- INJECTING HERE ----------
Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo: 48 89 5C 24 08        - mov [rsp+08],rbx
// ---------- DONE INJECTING  ----------
Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo+5: 48 89 74 24 10        - mov [rsp+10],rsi
Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo+A: 57                    - push rdi
Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo+B: 48 83 EC 20           - sub rsp,20
Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo+F: 48 8D B1 40 FA FF FF  - lea rsi,[rcx-000005C0]
Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo+16: 48 8B D9              - mov rbx,rcx
Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo+19: 48 8B CE              - mov rcx,rsi
Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo+1C: 8B FA                 - mov edi,edx
Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo+1E: E8 BD 42 FF FF        - call Remnant-Win64-Shipping.AItem::CheckInstanceData&lt;URangedWeaponInstanceData&gt;
Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo+23: 84 C0                 - test al,al
Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo+25: 74 5F                 - je Remnant-Win64-Shipping.ARangedWeapon::ConsumeAmmo+86
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"scrap pick up modifier"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Remnant-Win64-Shipping.exe
  Version: 
  Date   : 2023-07-28
  Author : bboyh

   something when you pick up scraps
}

define(address,"Remnant-Win64-Shipping.exe"+773785)
define(bytes,89 42 2C 33 D2)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"Remnant-Win64-Shipping.exe"+773785)

label(code)
label(return)

newmem:
  add eax,edi  // edi is the value picked up

code:
  mov [rdx+2C],eax
  xor edx,edx
  jmp return

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes
  // mov [rdx+2C],eax
  // xor edx,edx

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+395

Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+379: 44 8B 45 47     - mov r8d,[rbp+47]
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+37D: 8B 4A 2C        - mov ecx,[rdx+2C]
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+380: 41 3B C8        - cmp ecx,r8d
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+383: 7D 54           - jnl Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+3D9
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+385: 8B 7D 67        - mov edi,[rbp+67]
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+388: 41 8B C0        - mov eax,r8d
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+38B: 2B C1           - sub eax,ecx
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+38D: 3B C7           - cmp eax,edi
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+38F: 0F 4E F8        - cmovle edi,eax
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+392: 8D 04 39        - lea eax,[rcx+rdi]
// ---------- INJECTING HERE ----------
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+395: 89 42 2C        - mov [rdx+2C],eax
// ---------- DONE INJECTING  ----------
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+398: 33 D2           - xor edx,edx
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+39A: 48 8B 4E 18     - mov rcx,[rsi+18]
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+39E: 48 83 C1 30     - add rcx,30
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+3A2: E8 89 C8 B5 FF  - call Remnant-Win64-Shipping.TMulticastScriptDelegate&lt;FWeakObjectPtr&gt;::ProcessMulticastDelegate&lt;UObject&gt;
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+3A7: 29 7D 67        - sub [rbp+67],edi
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+3AA: 49 63 FC        - movsxd  rdi,r12d
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+3AD: 44 8D 67 01     - lea r12d,[rdi+01]
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+3B1: 44 89 65 9F     - mov [rbp-61],r12d
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+3B5: 44 3B 65 A3     - cmp r12d,[rbp-5D]
Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+3B9: 7E 0F           - jle Remnant-Win64-Shipping.UInventoryComponent::AddItemInternal+3CA
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"Unlimited Charges on Ranged Weapon"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Remnant-Win64-Shipping.exe
  Version: 
  Date   : 2023-07-30
  Author : bboyh

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

assert(Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+44,2C 01 88 83 B4 0B 00 00)

Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+44:
  db 90 90

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+44:
  db 2C 01 88 83 B4 0B 00 00
  // sub al,01
  // mov [rbx+00000BB4],al


{
// ORIGINAL CODE - INJECTION POINT: Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+44

Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+13: 48 89 84 24 A0 00 00 00  - mov [rsp+000000A0],rax
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+1B: 48 8B D9                 - mov rbx,rcx
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+1E: 48 85 C9                 - test rcx,rcx
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+21: 0F 84 A3 01 00 00        - je Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+1CA
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+27: E8 E4 B7 0C 01           - call Remnant-Win64-Shipping.AActor::InternalGetNetMode
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+2C: 83 F8 03                 - cmp eax,03
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+2F: 0F 8D 95 01 00 00        - jnl Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+1CA
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+35: 0F B6 83 B4 0B 00 00     - movzx eax,byte ptr [rbx+00000BB4]
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+3C: 84 C0                    - test al,al
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+3E: 0F 84 86 01 00 00        - je Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+1CA
// ---------- INJECTING HERE ----------
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+44: 2C 01                    - sub al,01
// ---------- DONE INJECTING  ----------
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+46: 88 83 B4 0B 00 00        - mov [rbx+00000BB4],al
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+4C: 0F 85 70 01 00 00        - jne Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+1C2
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+52: 80 BB 08 0C 00 00 02     - cmp byte ptr [rbx+00000C08],02
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+59: 0F 85 63 01 00 00        - jne Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+1C2
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+5F: 48 89 AC 24 D8 00 00 00  - mov [rsp+000000D8],rbp
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+67: 48 8D 05 32 A0 FD FF     - lea rax,[Remnant-Win64-Shipping.ARemnantRangedWeapon::DelayedDeactivate]
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+6E: 48 89 B4 24 E0 00 00 00  - mov [rsp+000000E0],rsi
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+76: 33 ED                    - xor ebp,ebp
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+78: 48 89 BC 24 E8 00 00 00  - mov [rsp+000000E8],rdi
Remnant-Win64-Shipping.ARemnantRangedWeapon::UseCharge+80: 48 8B CB                 - mov rcx,rbx
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Detach mods without penalty"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Remnant-Win64-Shipping.exe
  Version: 
  Date   : 2023-07-30
  Author : bboyh

  This script does blah blah blah
}

[ENABLE]

assert(Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation,40 53 48 83 EC 20)

Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation:
  ret

[DISABLE]

Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation:
  db 40 53 48 83 EC 20
  // push rbx
  // sub rsp,20

{
// ORIGINAL CODE - INJECTION POINT: Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation

Remnant-Win64-Shipping.UMatchmaker::OnDestroyCompleted+168: 48 8B 10              - mov rdx,[rax]
Remnant-Win64-Shipping.UMatchmaker::OnDestroyCompleted+16B: 48 83 C4 30           - add rsp,30
Remnant-Win64-Shipping.UMatchmaker::OnDestroyCompleted+16F: 5B                    - pop rbx
Remnant-Win64-Shipping.UMatchmaker::OnDestroyCompleted+170: 48 FF A2 70 02 00 00  - jmp qword ptr [rdx+00000270]
Remnant-Win64-Shipping.UMatchmaker::OnDestroyCompleted+177: 48 83 C4 30           - add rsp,30
Remnant-Win64-Shipping.UMatchmaker::OnDestroyCompleted+17B: 5B                    - pop rbx
Remnant-Win64-Shipping.UMatchmaker::OnDestroyCompleted+17C: C3                    - ret 
Remnant-Win64-Shipping.exe+5AF69D: CC                    - int 3 
Remnant-Win64-Shipping.exe+5AF69E: CC                    - int 3 
Remnant-Win64-Shipping.exe+5AF69F: CC                    - int 3 
// ---------- INJECTING HERE ----------
Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation: 40 53                 - push rbx
// ---------- DONE INJECTING  ----------
Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation+2: 48 83 EC 20           - sub rsp,20
Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation+6: 48 8B D9              - mov rbx,rcx
Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation+9: E8 42 7A 1E 00        - call Remnant-Win64-Shipping.AEquipmentMod::OnDetached_Implementation
Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation+E: 48 8B CB              - mov rcx,rbx
Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation+11: E8 4A 90 1D 00        - call Remnant-Win64-Shipping.AEquipmentMod::GetEquipment
Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation+16: 48 8B D8              - mov rbx,rax
Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation+19: 48 85 C0              - test rax,rax
Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation+1C: 74 50                 - je Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation+6E
Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation+1E: E8 CD 4B 08 00        - call Remnant-Win64-Shipping.ARemnantRangedWeapon::GetPrivateStaticClass
Remnant-Win64-Shipping.ARemnantWeaponMod::OnDetached_Implementation+23: 48 8B 4B 10           - mov rcx,[rbx+10]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>45</ID>
      <Description>"Trait Upgrade to Max"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Remnant-Win64-Shipping.exe
  Version: 
  Date   : 2023-08-03
  Author : bboyh

  Sets the trait to 20 (max) on upgrade
}

[ENABLE]

assert(Remnant-Win64-Shipping.UTraitsComponent::AddTrait+12B,41 89 2E 49 8B D6)
alloc(newmem,$1000,"Remnant-Win64-Shipping.exe"+7B21BB)

label(code)
label(return)

newmem:
  mov ebp,(int)20

code:
  mov [r14],ebp
  mov rdx,r14
  jmp return

Remnant-Win64-Shipping.UTraitsComponent::AddTrait+12B:
  jmp newmem
  nop
return:

[DISABLE]

Remnant-Win64-Shipping.UTraitsComponent::AddTrait+12B:
  db 41 89 2E 49 8B D6
  // mov [r14],ebp
  // mov rdx,r14

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: Remnant-Win64-Shipping.UTraitsComponent::AddTrait+12B

Remnant-Win64-Shipping.UTraitsComponent::AddTrait+106: 48 39 14 C8           - cmp [rax+rcx*8],rdx
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+10A: 75 03                 - jne Remnant-Win64-Shipping.UTraitsComponent::AddTrait+10F
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+10C: 48 8B FB              - mov rdi,rbx
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+10F: 48 8B CF              - mov rcx,rdi
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+112: E8 B9 A3 DD FF        - call Remnant-Win64-Shipping.UClass::GetDefaultObject&lt;UAIPOIType&gt;
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+117: 8B A8 C0 00 00 00     - mov ebp,[rax+000000C0]
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+11D: 41 8B 3E              - mov edi,[r14]
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+120: 3B EF                 - cmp ebp,edi
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+122: 0F 84 16 01 00 00     - je Remnant-Win64-Shipping.UTraitsComponent::AddTrait+23E
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+128: 45 33 C0              - xor r8d,r8d
// ---------- INJECTING HERE ----------
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+12B: 41 89 2E              - mov [r14],ebp
// ---------- DONE INJECTING  ----------
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+12E: 49 8B D6              - mov rdx,r14
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+131: 48 8B CE              - mov rcx,rsi
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+134: E8 77 58 01 00        - call Remnant-Win64-Shipping.UTraitsComponent::InitializeTrait
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+139: 49 8B 46 08           - mov rax,[r14+08]
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+13D: 48 8D 8E 70 01 00 00  - lea rcx,[rsi+00000170]
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+144: 48 8D 54 24 20        - lea rdx,[rsp+20]
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+149: 48 89 44 24 20        - mov [rsp+20],rax
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+14E: 89 7C 24 28           - mov [rsp+28],edi
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+152: E8 39 DE B1 FF        - call Remnant-Win64-Shipping.TMulticastScriptDelegate&lt;FWeakObjectPtr&gt;::ProcessMulticastDelegate&lt;UObject&gt;
Remnant-Win64-Shipping.UTraitsComponent::AddTrait+157: B0 01                 - mov al,01
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>Most items and equipment are 4 bytes dec.
</Comments>
  <LuaScript>getApplication().Title="framerates"
getMainForm().Caption="framerates"
getAutoAttachList().add("Remnant-Win64-Shipping.exe")

</LuaScript>
</CheatTable>
